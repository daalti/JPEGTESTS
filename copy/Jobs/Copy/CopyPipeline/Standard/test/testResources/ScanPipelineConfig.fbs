// DUNE_NOT_PERSISTENT
include "JobFrameworkTypes.fbs";
include "FileFormat.fbs";
include "ImagingSendTypes.fbs";
include "PipelinePolicy.fbs";
include "ScanTypes.fbs";
include "ColorMode.fbs";
include "Resolution.fbs";
include "NotificationStrategy.fbs";
include "Scaling.fbs";
include "ContentType.fbs";

namespace dune.scan.Jobs.Scan;

enum ResourceName : uint16
{
    NONE = 0,
    SCANDEVICE = 1,
    IMAGEPERSISTERDISKBUFFERING = 2,
    IMAGERETRIEVERDISKBUFFERING = 3,
    IMAGERETRIEVER = 4,
    IMAGEPROCESSOR = 5,
    IMAGEPROCESSORPREVIEW = 6,
    IMAGEPERSISTER = 7,
    DOCUMENTPROCESSOR = 8,
    DOCUMENTBUILDER = 9,
    DESTDEVICE = 10,
    IMAGERETRIEVERFINALDISKBUFFERING = 11,
    MARKINGFILTER = 12,
    PAGEASSEMBLER = 13,
    RTPFILTER = 14,
    PRINTDEVICE = 15,
    LAYOUTFILTER = 16,
    ANALOGFAXDEVICE = 17,
    FAXADAPTER = 18,
    RECEIVEFAXFILTER = 19,
    SENDFAXFILTER = 20,
    FAXPDL = 21,
    IPADEVICE = 22,
    IMAGEEXPORTER = 23,
    IMAGEIMPORTER = 24
}

enum WritingStrategy : uint8
{
    NONE = 0,
    WRITE_STREAM = 1,
    WRITE_FILE = 2
}

enum PipelineSegmentType : uint8
{
    NONE = 0,
    PREPARE_SEGMENT = 1,
    FINAL_SEGMENT = 2,
    MULTIPAGE_SEGMENT_ONE = 3,
    MULTIPAGE_SEGMENT_TWO = 4,
    MULTIPAGE_SEGMENT_THREE = 5,
    RETRY = 6, // Retry to execute the second section of the pipeline again
    RERUN = 7, // Reprint and Resend
    MAINTENANCE_SEGMENT = 8, // Calibrate scanner
    DIRECT_JOB_SEGMENT = 9, // Drect copy mode
    MULTI_PREPARE_SEGMENT = 10, // To Run Prepare Segment multiple times
    PREVIEW_FINAL_SEGMENT = 11, // Execute the final segment of preview
    LONG_PLOT_SEGMENT = 12, // Long plot workflow
    FAX_SESSION = 13, // Fax session
    ALLOCATE_PRINT_RESOURCES = 14,
    ALLOCATE_ARCHIVE_ONLY_RESOURCES = 15,
    DECODE_IMAGE = 16,
    RETRIEVE_JOB_DECODE_IMAGE = 17,
    QUERY_PRINT_INFO = 18,
    PRINT = 19,
    SCAN_AND_STORE = 20,
    START_FAX_SESSION = 21, // Scan and Fax on
    START_FAX_SESSION_MANUAL = 22, //Start manual fax session
    FAX_SESSION_MANUAL = 23, // Scan and Fax off
    RESERVE_AFD = 24,
    FAX_SESSION_PDL = 25, //PC fax or Air fax
    IDCARD_SEGMENT_THREE = 26,
    IDCARD_PREVIEW_FINAL_SEGMENT = 27,
    RETRIEVE = 28,
    LAN_FAX_SESSION = 29,
    LAN_FAX_SESSION_PREVIEW = 30,
    FAX_SESSION_PREVIEW = 31,


    
    // JUST FOR TESTING PUPPOSES UNTIL LAYOUT FILTER REPLACE MARKING FILTER
    TEST_FINAL_SEGMENT_LAYOUT_FILTER = 100,
    TEST_MULTIPAGE_SEGMENT_ONE_LAYOUT_FILTER = 101,
    TEST_MULTIPAGE_SEGMENT_TWO_LAYOUT_FILTER = 102,
    TEST_MULTIPAGE_SEGMENT_THREE_LAYOUT_FILTER = 103,
    TEST_RETRY_LAYOUT_FILTER = 104
}

enum QueuingFlag : uint8
{
    NONE = 0,
    ENQUEUE = 1,
    DEQUEUE = 2,
    BOTH = 3
}

enum PipeObjectType : uint8
{
    NONE = 0,
    IMAGECONTAINER = 1,
    ATTACHMENTOBJECT = 2,
    PAGEDATA = 3
}

enum FlowType: uint8
{
    DEFAULT = 0,
    SCAN = 1,
    COPY = 2,
    PRINT = 3,
    PREVIEW =4
}

enum ComputeScale: uint8
{
    NONE = 0,
    SIZE = 1,
    RESOLUTION = 2
}

table PreviewSettings
{
    previewResolution:              int = 0;
    stripHeight:                    int = 0;
    savePreviewMode:                bool = false;
    refreshPreviewSupported:        bool = false;
}

enum PageDataPipe: uint8
{
    NONE = 0,
    ENQUEUE = 1,
    DEQUEUE = 2
}

table ResourceConfig
{
    resourceId:                     ResourceName;
    jobletBoudary:                  dune.job.JobletBoundary;
    fileFormat:                     dune.imaging.types.FileFormat;
    fileName:                       string;
    compressionTypeTiff:            dune.imaging.types.CompressionType;
    writeStrategy:                  WritingStrategy;
    notificationStrategy:           dune.imaging.types.NotificationStrategy;
    toPipe:                         ResourceName;
    fromPipe:                       ResourceName;
    setKeep:                        bool;
    isSegmentFirstResource:         bool;
    isSegmentLastResource:          bool;
    reusePipeQueue:                 bool;
    openForAppending:               bool;
    pipeType:                       PipeObjectType;
    queuingFlag:                    QueuingFlag;
    isPipeQueueRequired:            bool;
    flowType:                       FlowType;
    thumbnailResolution:            int = -1;
    computeScale:                   ComputeScale;
    reloadResource:                 bool = false;
    removeImageWhenFinish:          bool = true;
    persistentPipe:                 bool = false;
    doSafeguard:                    bool = false;
    documentBuilderDithering:       bool = false;
    documentBuilderBuffering:       bool = false;
    scannerDithering:               bool = true;
    reset:                          bool = false; // reset the resource
    useTicketPersistentPath:        bool = false; // use Ticket persistent path to create an persisited pipe queue
    enabledIf:                      [string];
    imageRetrieverAllowAutoRotation:bool = false;
    upScaleStrategy:                dune.imaging.types.ScaleStrategy=UNKNOWN; 
    downScaleStrategy:              dune.imaging.types.ScaleStrategy=UNKNOWN; 
    usePipeList:                    bool = false; // use pipeList instead of a pipeQueue to allow operations like delete and move. For more information check IPipeListOperations.
    autoRotationWidthRollMatchingTolerance:uint32 = 0;
    fitToMediaSize:                 bool = false;
    heightCalculation:              bool = false;
    doMediaHandlingCheck:           bool = false;
    usePipeTee:                     int = 1; // use pipe tee indicating the number of dequeues expected when will be used. If are only one, the pipe tee will be created like a Pipe Queue.
    detectOriginalScanSize:         bool = false;
    section:                        int = 1; //identify what is the segment section where the resource belongs. Sections need to be defined consecutive in the csf file (1,2,3,4, ...)
    performRotation:                bool = true; //True by default to check always if rotation should be performed. False indicates that will not be checked directly to avoid check print intents updates
    stripHeight:                    int = 0;
    useRawForWebScan:               bool = false;
    usePageDataPipe:                bool = false;
}

table CustomBuildPipeline {
    pipelineSegmentType:            PipelineSegmentType;
    pipelinePolicy:                 dune.job.PipelinePolicy;
    resourceInstanceProxyList:      [ResourceConfig];
    sectionEnabled:                 bool = false; // indicate that this pipeline support has 2 sections
}

table PipelineBuilderConfig {
    defaultWriteStrategy:           WritingStrategy;
    defaultNotificationStrategy:    dune.imaging.types.NotificationStrategy;
    previewSettings:                PreviewSettings;
    fileFormat:                     dune.imaging.types.FileFormat;
    pipelineSegements:              [CustomBuildPipeline];
}


table ScanJobMaxSupportedSizesFbs{
    scanMaxCm:      int = 0;    // cm
    jpegMaxLines:   int = 0;    // lines of pixels
    tiffMaxMb:      int = 0;    // fileSize(megabytes) - Note: consider subtracting at last 1MB to account for the file metadata
    pdfMaxCm:       int = 0;    // cm
    pdfaMaxCm:      int = 0;    // cm
    longPlotMaxCm:  int = 0;    // cm
}

table DitherThresholdOverride{
    ditherThreshold: int = 0;
    contentTypes: [dune.imaging.types.OriginalContentType];
    mediaTypes: [dune.scan.types.OriginalMediaType];
    backgroundColorRemovalExpects:[bool];
}

table ScanPipelineConfig {
    scanDiskBuffering               : bool;
    edgeRemoval                     : bool;
    imageQuality                    : bool;
    pipelineBuilderConfig           : PipelineBuilderConfig;
    thumbnailResolution             : uint32; 
    maxSupportedSizes               : ScanJobMaxSupportedSizesFbs;
    useDefaultFromConfigurationFile : bool = false;
    maxXExtent                      : int = 0;
    maxYExtent                      : int = 0;
    useScanMediaSizeOnCountryBasis  : bool = false;
    ditheringThresholdMap           : [DitherThresholdOverride];
}

root_type ScanPipelineConfig;
