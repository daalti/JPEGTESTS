// DUNE_NOT_PERSISTENT
namespace dune.scan.types;

enum ScanSource:byte
{
    GLASS=0,
    ADF_SIMPLEX,
    ADF_DUPLEX,
    MDF
}

enum MediaInputHwFlavor:byte
{
    NONE=0,
    GROWLER,
    PROWLER,
    TAROT,
    SGXGX,
    LXSGX,
    VIVACE,
    VALIANT,
    PILEDRIVER,
    NISCA,
    FLATBED,
    SPARROW,
    GRAPE2,
    HYBRIDRX,
    GROWLERP,
    PROWLERP,
    IGROWLER,
    IPROWLER
}

enum ScanFeedOrientation:byte
{
    SHORTEDGE=0,
    LONGEDGE
}

enum ScanEdgeAutoDetection:byte
{
    TopEdge=0,
    LeftEdge,
    BottomEdge,
    RightEdge
}

enum OriginalMediaType:byte
{
    WHITE_PAPER=0,
    PHOTO_PAPER,
    OLD_RECYCLED_PAPER,
    TRANSLUCENT_PAPER,
    BLUEPRINTS,
    DARK_BLUEPRINTS,
    WHITE_PAPER_ENHANCED,
    OBJECT_3D,
    BROCHURE_MATTE,
    BROCHURE_GLOSSY
}

enum OverScanType:byte
{
    TOPANDBOTTOM=0
}

enum ScanCaptureModeType:byte
{
    STANDARD=0,
    JOBBUILD,
    BOOKMODE,
    IDCARD
}

enum ScanImagingProfileType:byte
{
    COPY=0,
    SEND,
    FAX,
    RAW_SCAN_CAPTURE,
    REFLOW_OUT
}

enum AttachmentSize:byte
{
    SMALL = 0,
    STANDARD,
    LARGE
}

enum SIReturnEnum:byte
{
    TimedOut              = -4,
    InsufficientResources = -3,
    InvalidState          = -2,
    InvalidRequest        = -1,
    Succeeded             =  0,
    RedundantCommand      =  1
}

enum ScannerStateEnum:byte
{
    Initializing = 0,
    Ready        = 1,
    Processing   = 2,
    Error        = 3,
    Cancel       = 4,
    Blocked      = 5,
    Maintenance  = 6,
    Diagnostic   = 7,
    Sleep        = 8
}

enum ColorSpaceEnum:int
{
    BiLevel          = 0,     //Specific scanner may not support
    Gray             = 1,
    RGB              = 2,
    CMY              = 3,     //Specific scanner may not support
    CIELab           = 4,     //Specific scanner may not support
    cRGB             = 5,     //Specific scanner may not support
    sRGB             = 6,     //Specific scanner may not support
    SubtractGray     = 7,     //Specific scanner may not support
    Monochrome       = 8,
    AutoDetectColorSpace       = 255
}

enum ScanSourceEnum:byte
{
    Flatbed = 0,
    ADF     = 1,
    MDF     = 2
}

enum ScanOrientationEnum:byte
{
    ShortEdgeFeed      = 0,
    LongEdgeFeed       = 1
}

enum ContentOrientationEnum:byte
{
    Portrait    = 0,
    Landscape   = 1,
    AutoDetect  = 2
}

enum CompletedStatusEnum:byte
{
    CompletedOK = 0,
    ByCancel = 1
}

enum DuplexSideEnum:byte
{
    FrontSide          = 0,
    BackSide           = 1
}

enum ScanTypeEnum:byte
{
    Copy         = 0,
    DigitalSend  = 1,
    Fax          = 2,
    ScanCapture  = 3,
    ReflowOut    = 4
}

enum OriginalTypeEnum:int
{
    Text          = 0,
    Photo         = 1,
    Mixed		  = 2,
    AutoDetect    = 255
}

enum OriginalSubTypeEnum:int
{
    Printed         = 0,
    Photograph      = 1
}

//
//  Output Resolution uses enum values
//
//  for backword compatibility with older product
//  please only add new resolution to the end of the enum list
enum ImageQualityEnum:byte
{
    DPI600         = 0,
    DPI400         = 1,
    DPI300         = 2,
    DPI200         = 3,
    DPI150         = 4,
    DPI100         = 5,
    DPI75          = 6,
    DPI1200        = 7
}

//
//  Scan Resolution uses the actual values
//

enum PhotoModeEnum:byte
{
    Printed         = 0,
    Glossy          = 1
}

enum ScanMediaEnum:byte
{
    Normal        = 0,
    HeavyMedia    = 1
}

enum BookModeEnum:byte
{
    Disable       = 0,
    BothPages     = 1,
    LeftPageOnly  = 2,
    RightPageOnly = 3
}

enum PageBindingModeEnum:byte
{
    VerticalBinding   = 0,
    HorizontalBinding = 1
}

enum ScanBitDepthEnum:byte
{
    Depth8Bits  = 0,
    Depth4Bits  = 1,  //Some specific scanner may not support
    Depth2Bits  = 2,  //Some specific scanner may not support
    Depth1Bits  = 3
}

enum CompressionModeEnum:byte
{
    Uncompressed           = 0,
    JPEG                   = 1,
    HPComp                 = 2,
    TBMRC                  = 3  //Some specific scanner may not support
}

enum AcsResultEnum:byte
{
    Undecided = 0,
    Color     = 1,
    Grayscale = 2,
    Binary    = 3
}

enum AutoColorDetectEnum:byte
{
    DetectOnly                      = 0,
    TreatNonColorAsBlackAndWhite1   = 1,
    TreatNonColorAsGrayscale8       = 2,
}

enum CurrencyDetectResultEnum:byte
{
    CurrencyDetectionDisable = 0,
    CurrencyDetected         = 1,
    CurrencyNotDetected      = 2
}

enum XJustification:byte
{
    Left   = 0,
    Center = 1,
    Right  = 2
}

enum YJustification:byte
{
    Top    = 0,
    Center = 1,
    Bottom = 2
}

enum CcdChannelEnum:byte
{
    NTSC=0,
    GrayCcd,
    GrayCcdEmulated,
    Red,
    Green,
    Blue
}

enum BinaryRenderingEnum:byte
{
    Halftone=0,
    Threshold,
    ErrorDiffusion
}
enum AlertID:uint32
{
    FlatbedPageLoaded   = 0,
    ADFPageLoaded       = 1,
    CoverOpen           = 2,
    JamError            = 3,
    DeviceError         = 4,
    ADFNotPresent       = 5,
    DustDetectionResult = 6,
    JobReject           = 7,
    LoadFail            = 8,
    ClipError           = 9,
    MaxCollatePages     = 10,
    ScanCalibration     = 11,
    FatalError          = 12,
    PaperOnPath         = 13,
    RamError            = 14
}
enum ImagePreview:byte
{
    Disable = 0,
    Enable,
    MakeOptional
}
enum BlankDetectEnum:byte
{
    Disable         = 0,
    DetectOnly      = 1,
    DetectAndSupress = 2
}
enum PrescanFileResult:byte
{
    PRESCAN_SAVE_ERROR       =   0,
    PRESCAN_SAVE_SUCCESSFUL  =   1,
    PRESCAN_NO_WRITE         =   2,
    PRESCAN_WRITE_CANCELLED  =   3,
    PRESCAN_WRITE_FAILED     =   4
}

enum ScannerSettingID:uint32
{
    Leadedgefb              = 0,
    Leadedgefront           = 1,
    Leadedgeback            = 2,
    Sideedegfb              = 3,
    Sideedgefront           = 4,
    Sideedgeback            = 5,
    Trailedgefront          = 6,
    Trailedgeback           = 7,
    Adfmagnification        = 8,
    SensorsInfo             = 9,
    Fbmotor                 = 10,
    Adffeedmotor            = 11,
    Adfdeskewmotor          = 12,
    Adfpickupmotor          = 13,
    Adftrayliftmotor        = 14,
    Adfretardmotor          = 15,
    Adfexitmotor            = 16,
    Adfpickupclutch         = 17,
    Adfdeskewclutch         = 18,
    Adfpickuproller         = 19,
    FirmwareVersion         = 20,
    SubFirmwareVersion      = 21,
    ISASerialNumber         = 22,
    ADFSerialNumber         = 23,
    ISABornOnDate           = 24,
    ADFBornOnDate           = 25
}

enum DiagnosticTestID:uint32
{
    UNDEFINED                       = 0,
    ScanDiagnotic_simplex           = 1,
    ScanDiagnotic_duplex            = 2,
    ScanDiagnotic_notch             = 3,
    ScanDiagnotic_prnu              = 4,
    ScanDiagnotic_oop               = 5,
    ScanDiagnostic_sensor           = 6,
    ScanDiagnostic_sensor0          = 7,
    ScanDiagnostic_sensor1          = 8,
    ScanDiagnostic_sensor2          = 9,
    ScanDiagnostic_media            = 10,
    ScanDiagnostic_32V              = 11,
    ScanDiagnostic_Comms            = 12,
    ScanDiagnostic_InternalVoltages = 13,
    ScanDiagnostic_NvmPresence      = 14,
    ScanDiagnostic_Scanbar          = 15
}
enum PrescanActionBits:uint
{
    PRESCAN_EDGE                   =    1,
    PRESCAN_TENH                   =    2,
    PRESCAN_SAVE_TO_FILE           =    4,
    PRESCAN_START_END_JOB          =    8,
    PRESCAN_HIST                   =   16,
    PRESCAN_HIST_RGB               =   32,
    PRESCAN_COLOR                  =   64,
    PRESCAN_CHECK_GLASS            =  128,
    PRESCAN_HIST_LMB               =  256,
    PRESCAN_SRC_SCAN2FILE          =  512,
    PRESCAN_EDGE_RAW               =  1024
}

enum ScanScaleSelectionEnum:byte
{
    NONE                    =  0,
    CUSTOM                  =  1,
    STANDARD_SIZE_SCALING   =  2,
    SCALE_TO_OUTPUT         =  3,
    FITTOPAGE               =  4,
    FULLPAGE                =  6,
    LEGALTOLETTER           =  7,
    A4TOLETTER              =  8,
    LETTERTOA4              =  9
}

enum MaintenanceResultEnum:byte
{
    MAINTENANCE_SUCCESS     = 0,
    MAINTENANCE_FAILED      = 1,
    MAINTENANCE_CANCELLED   = 2,
}

enum ScanAcquisitionsSpeedEnum:byte
{
    AUTO                    =  0,
    SLOW                    =  1
}

enum ScanErrorTypeEnum:uint32
{
    SCAN_GENERAL_ERROR = 0,
    SCAN_JAM_ERROR = 1,
    SCAN_DEVICE_ERROR = 2
}
enum ScanMapQualityEnum:byte
{
    FAST   = 0,
    NORMAL = 1,
    BEST   = 2,
    MAX_COPY_QUALITY
}

enum BlankDetectResultEnum:uint32
{
    UNKNOWN   = 0,
    NOT_BLANK = 1,
    BLANK     = 2
}

enum ScannerCalibrationType:byte
{
    UNKNOWN   = 0,
    PRNU      = 1,
    LED       = 2
}

enum ImageReturnFormatEnum:byte
{
    SingleImage = 0,
    MultiImage  = 1
}

table ScanTicketStructFbs
{
    // Specifies the type of scan.
    ScanType : ScanTypeEnum;

    // Specifies the source of the scan.
    ScanSource : ScanSourceEnum;

    // The orientation in which the document is to be scanned
    ScanOrientation : ScanOrientationEnum;

    //Specifies if input pages are scanned on one side or both sides.
    InputDuplexMode : DuplexSideEnum;

    // Original media type
    InputMediaType : OriginalMediaType;

    // Starting X location in 600 pixel/inch increments for the scanned page.
    // Range : 0 – 65535
    XScanOriginSide : uint32;

    // Starting Y location in 600 pixel/inch increments for the scanned page.
    // Range : 0 – 65535
    YScanOriginSide : uint32;

    //Scanned image size in the X direction in 600 pixel/inch increments.
    // Range : 0 – 65535
    XScanSizeSide : uint32;

    // Scanned image size in the Y direction in 600 pixel/inch increments.
    // Range : 0 – 65535
    YScanSizeSide : uint32;

    //target output image size in the X direction
    outXExtent : uint32;

    //target output image size in the Y direction
    outYExtent : uint32;

    // Specifies the brightness/contrast setting to use by the scanner
    // 0 – Minimum Brightness
    // 8 – Maximum brightness
    Brightness : uint32;

    // Specifies the image-processing mode to use when scanning
    OriginalType : OriginalTypeEnum;

    // Specifies the desired color space
    ColorSpace : ColorSpaceEnum;

    // Specifies the image quality in the X direction in pixels per inch
    // Default is 600
    XImageQuality : uint32;

    // Specifies the image quality in the Y direction in pixels per inch
    // Default is 600
    YImageQuality : uint32;

    // Specifies the output file resolution in the X direction in pixels per inch for digital sending
    // default is 150
    OutputXImageQuality : ImageQualityEnum;

    // Specifies the output file resolution in the Y direction in pixels per inch for digital sending
    // default is 150
    OutputYImageQuality : ImageQualityEnum;

    // Specifies the sharpness setting to be used by the scanner
    // 0 – minimum sharpness,
    // 3 - Default
    // 6 – maximum sharpness
    Sharpness : uint32;

    // Specifies the relative priority of text and graphics on the image, when the "Scan Mode" is mixed.
    // 0 – Text highest priority
    // 2 (default)
    // 4 – Graphics highest priority
    TextGraphicsPriority : uint32;

    // Specifies the amount of background removal.
    // 0  - minimum background removal (more background visible)
    // 2 (default)
    // 8 – maximum background removal (less background visible)
    BackgroundRemoval : uint32;

    //Media size in the X direction, in pixels,  calculated using the X Image Quality (22) attribute.
    XMediaSize : uint32;

    //Media size in the Y direction, in pixels,  calculated using the Y Image Quality (23) attribute.
    YMediaSize : uint32;

    //Specifies the photo mode to use, when the "Scan Mode" is photo.
    PhotoModeType : PhotoModeEnum;

    // Used to specify the maximum number of pages that will be scanned through the ADF.
    JobScanLimit : uint32;

    // Specifies the X scale factor to apply to the X Scan Size.
    // Range: 25,000 – 400,000
    // NOTE:  Number is multiplied by 1000 to preserve 3 digits of fractional precision.
    ScaleXFactor : uint32;

    //Specifies the Y scale factor to apply to the Y Scan Size.
    ScaleYFactor : uint32;

    // Specifies the contrast setting to be used by the imaging pipe.
    // 0 - Minimum Contrast
    // 4 - Default
    // 8 - Maximum Contrast
    Contrast : uint32;

    // Specifies whether or not the Scan Device will transfer the OT map data to the formatter for the given job.
    // 0 = Do not transfer (default)
    // 1 = Transfer
    TransferObjectTypeMap : bool;

    // Scan ADF Input as a mixed media stack.
    // 0 = Disabled (Default)
    // 1 = MixedMedia
    MixedMediaInput : bool;

    // Available only for ADF jobs, sets the motor speed for type of media selected
    ScannerMedia : ScanMediaEnum;

    // The orientation of the content (.g. text, graphics) of the image.
    ContentOrientation : ContentOrientationEnum;

    // Specifies whether the back side of the original page is flipped when duplexing.
    PageBindingMode : PageBindingModeEnum;

    // Height of the strip buffer in rows
    // range:1 – 65535
    StripHeight : uint32;

    //Width of the strip buffer in bits.  Width = bits per pixel * width in pixels of the printable area then padded to be word aligned
    StripWidth : uint32;

    // File Size (compression)
    // 0 = Small
    // 1 = Standard
    // 2 = Large
    // **Note: Some specific scanner may not support this parameter
    DigitalSendFileSize : uint32;

    // Specifies whether the formatter requests any counterfeit detection on the job.  Note: this attribute is specified
    // such that a value could be added in the future, without having to add a new tag attribute, to have the
    // Scan Device to do the counterfeit detection and pass the result to the formatter
    // 0 = Disabled (default)
    // 2 = Enable currency detection at the image source
    CounterfeitDetection : uint32;

    // Specifies the bit depth (i.e. bits per pixel) per color channel of the image data that the  Scan Device will produce.
    // Default = 8Bits
    BitDepth : ScanBitDepthEnum;

    // Specifies the format of the image data being produced from the  Scan Device.  The compression mode,
    // in general specifies the compression mode of the image data itself, but it assumes a format of the
    // OT data if the "Transfer OT Map" is set to transfer.  The assumption of OT format are:
    // - Uncompressed == Uncompressed OT data
    // - JPEG == Uncompressed OT data
    // - HP Comp == HP ways compressed interleaved OT data
    CompressionMode : CompressionModeEnum;

    // Specifies the multiple numbers of lines that the formatter requires the full image size out of the  Scan Device to be.
    // Will be used in conjunction with the  Scan Device's specific requirements to try and come up with a multiple that
    // works for both sides of the system.
    // 0 = invalid value
    // 8 = Default
    MultipleNumberofLinesRequired : uint32;

    // Specifies if auto brightness, contrast and background removal should be performed.
    // Brightness-Contrast, Contrast and Background Removal  tag values will be ignored when enabled.
    // 0 = Disabled (default)
    // 1 = Enabled
    AutoToneScale : bool;

    // Used to indicate to  Scan Device to not white space pad to the originally requested length of the image
    // (e.g. send whatever length of image data we receive from the scanner's ADF).
    // First used for eSCL scanning.
    // 0 = Off (Default)
    // 1 = On
    NoImagePadding : bool;

    // Some scanners have a sensor that can detect if multiple pages are picked on ADF scans.
    // It is enabled by default, but the user has the option to disable reporting a multi-pick error (for a case like heavy media).
    // 0 = Enabled (default)
    // 1 = Disabled
    DisableMultiPickSensing : bool;

    // In addition to being able to detect multi-picks (see DisableMultiPickSensing), some scanners can also reverse the motors and retry picking the media. This controls the desired behavior when a multi-pick is detected.
    // Unused if  DisableMultiPickSensing is set to 1=Disabled
    // 0 = Stop (Default)
    // 1 = Reverse and Retry
    MultiPickSensingAction : bool;

    // Enable blank page detection
    // 0 = Disabled (Default)
    // 1 = DetectOnly
    // 2 = Detect And Remove
    DetectBlankPage : BlankDetectEnum;

    /// CCD channel
    CcdChannel : CcdChannelEnum;

    // Binary Rendering
    BinaryRendering : BinaryRenderingEnum;

    // Descreen
    // Todo - get description
    descreen : bool;

    // Feeder Pick feederPickStop
    // Todo - get description
    feederPickStop : bool;

    // Shadow
    // Todo - get description
    shadow : uint32;

    // Compression Factor
    // Todo - get description
    compressionFactor : uint32;

    // Threshold
    // Todo - get description
    threshold : uint32;

    // Enable auto color detection
    scanAutoColorDetect : AutoColorDetectEnum;

    // Enable Black Background
    // 0 = Disabled (Default)
    // 1 = Enabled
    scanBlackBackground : bool;

    // Number of pages to scan
    adfMaxPagesToScan : uint32;

    // Enable Auto Exposure
    // 0 = Disabled (Default)
    // 1 = Enabled
    scanAutoExposure  :bool;

    // Gamma
    //TODO Do not know resolution of numbers
    // It is float stored in an int
    scanGamma  :uint32;

    // Scan Highlight
    // TODO Enter reasonable min, max, resolution, and default
    scanHighlight : int32;

    // Color scanColorSensitivity
    // TODO Enter reasonable min, max, resolution, and default
    scanColorSensitivity : int32;

    // Color Range
    // TODO Enter reasonable min, max, resolution, and default
    scanColorRange : int32;

    // Pages Flip Up Enabled
    // Page binding on long side be default, enabled means short side binding.
    scanPagesFlipUpEnabled : bool;

    // Image Preview
    // Scan will do preview, based on setting.
    imagePreview : ImagePreview;

    // Over Scan
    OverScan : OverScanType;

    // AutoCrop
    // 0 = Disabled (Default)
    // 1 = Enabled
    AutoCrop : bool;

    // Noise Removal
    scanNoiseRemoval : int32;

    // Blank Page Sensitivity
    scanBlankPageSensitivity : int32;

    //Common scaling factors (a4ToLetter etc.)
    ScanScaleSelection : ScanScaleSelectionEnum;

    //Enables scale to fit page
    ScaleToFitEnabled : bool;

    // IsCalibrationJob
    // 0 = Disabled (Default)
    // 1 = Enabled
    IsCalibrationJob : bool;

    Interleaved : bool;

    scanInYcc : bool;

    // Used to turn the deskew function of the copy pipe on or off.
    // 0 = Off (Default)
    // 1 = On
    Deskew : bool;

    scanMapQuality: ScanMapQualityEnum;

    // TBMRC version
    // 0 = V1 (FG, BG, CTM, BTM)
    // 1 = V2 (FG, BG, CTM, BTM, RGB_RAW)
    tbmrcVersion : uint32;

    filePath: string;

    bookMode: BookModeEnum;

    // It's the same as background removal from the enterprise products perspective.
    // We need to add this attribute separately to avoid confusion with the background color removal which is using on other products.
    // 0 - minimum (more background visible)
    // 2 (default)
    // 8 - maximum removal (less background visible)
    BackgroundCleanup : uint32;
    
    //Enables fit to page includePrintMargins
    fitToPageIncludeMargin : bool;

    // Specifies the auto tone scale setting to be used by the imaging algorithm. Only used when “AutoToneScale” is enabled.
    // 0 – 255
    // 0 = Minimum 
    // 4 = Maximum 
    // Default = 2
    AutoToneScaleRange : uint32;

    // Specifies if auto paper color removal should be performed.
    // 0 = Disabled (default)
    // 1 = Enabled
    AutoWhiteColorRemoval : bool;

    // Specifies the auto paper color removal setting to be used by the imaging algorithm
    // 0 – 255
    // 0 = Minimum 
    // 4 = Maximum 
    // Default = 1
    AutoWhiteColorRemovalRange : uint32;
}

table ScanReflowStructFbs
{
    thisStructureNeedsToBeDefined : uint32;
}

table ScanMemoryStructFbs
{
    SegmentPtr    : uint64;
    SegmentSize   : uint32;
}

table StripInfoStructFbs
{
    StripPointer           : uint64;
    StripSizeInBytes       : uint32;
    PlaneSizeInBytes       : uint32;
    PlaneOffsetSizeInBytes : uint32;
    LastStripOfPage        : bool;
    LastStripOfJob         : bool;
    TOCSize                : uint32;
    TiledImageOffset       : uint32;
    WhiteSpacePad          : bool;
    NumberOfTimesToPad     : uint32;
    RemarkNeeded           : bool;
}

table ImageTicketStructFbs
{
    SourceWidth             : uint32;
    SourceHeight            : uint32;
    CompressionMode         : CompressionModeEnum;
    NumberOfStrips          : uint32;
    ImageRotationAngle      : uint32;
    ContentRotationAngle    : uint32;
    ColorSpace              : ColorSpaceEnum;
    InputDuplexSide         : DuplexSideEnum;
    OriginalType            : OriginalTypeEnum;
    ScanOrientation         : ScanOrientationEnum;
    ScannedWidth            : uint32;
    ScannedHeight           : uint32;
    ImagePaddingTop         : uint32;
    ImagePaddingBottom      : uint32;
    ImagePaddingRight       : uint32;
    ImagePaddingLeft        : uint32;
    ImageRowOffset          : uint32;
    XOutputImageQuality     : ImageQualityEnum;
    YOutputImageQuality     : ImageQualityEnum;
    AcsResult               : AcsResultEnum;
    Interleaved             : bool;
    OTBitDepth              : uint32;
    TBMRCBlobHeader         : string;
    ScanMapQuality          : ScanMapQualityEnum;
}

table EndImageTicketStructFbs
{
    UsableImage                 : bool;
    CurrencyDetectionResult     : CurrencyDetectResultEnum;
    CropULX                     : uint32;
    CropULY                     : uint32;
    CropLRX                     : uint32;
    CropLRY                     : uint32;
    BlankPageDetectionResult    : uint32;
    BlankPageColoredMatchResult : uint32;
    DocumentClassificationResult: OriginalTypeEnum;
}

table PrescanResultFbs
{
    resolution     : uint32;
    leftEdge       : uint32;
    rightEdge      : uint32;
    topEdge        : uint32;
    bottomEdge     : uint32;
    saveResult     : PrescanFileResult;
    saveResolution : uint32;
}