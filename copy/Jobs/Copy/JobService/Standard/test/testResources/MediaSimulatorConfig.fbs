include "MediaType.fbs";
include "MediaSizeId.fbs";
include "MediaSize.fbs";
include "MediaSource.fbs";
include "MediaDestinationId.fbs";
include "Media.fbs";
include "Variant.fbs";
include "FinishingOptions.fbs";
include "InputDevType.fbs";

namespace dune.print.engine.simulator;

enum OutputDevType : uint32 { Bin }
enum MediaPathDevType : uint32 { PrintZone, Flipper, Duplexer, Heater, Curing }
enum FinisherDevType : uint32 { Cutter, Folder, LargeFormatFolder, LargeFormatTakeUpReel, PageBasedFinisher }

table DrawerDevice{
    drawerPosition: uint32 = 0;
    relatedInputRollIds: [uint32];
}

table StaplingSupportedList{
    staplingOptions                         : [dune.imaging.types.StapleOptions];
}

table PunchingSupportedList{
    punchingOptions                         : [dune.imaging.types.PunchingOptions];
}

table FoldingSupportedList{
    foldingOptions                          : [dune.imaging.types.FoldingOptions];
}

table StaplingPunchingSupportedList{
    staplingOption                          : dune.imaging.types.StapleOptions;
    punchingOptions                         : [dune.imaging.types.PunchingOptions];
}

table ValidFinisherCombination{
    // REVIEW: not sure if we could use the Finisher IDs (as it is now) and/or types and/or other(s)...
    finishers: [uint32];
    isStaplingSupported                     : bool = false;
    staplingList                            : [StaplingSupportedList];
    isPunchingSupported                     : bool = false;
    punchingList                            : [PunchingSupportedList];
    isStaplingPunchingCombinationSupported  : bool = false;
    staplingPunchingCombinationList         : [StaplingPunchingSupportedList];
    isFoldingSupported                      : bool = false;
    foldingList                             : [FoldingSupportedList];
    isBookletMakerSupported                 : bool = false; //bookletMakingList is not required because BOOKLET_MAKER is only available.
    isJobOffsetSupported                    : bool = false;
    jobOffsetSupportedList                  : [dune.imaging.types.JobOffsetMode];
    hasDeviceName                           : bool = false;
    deviceName                              : string;
}

table DeviceSetting
{
    type: dune.print.engine.DeviceSettingFieldType;
    settingValue: dune.print.engine.VariantValue;
}

// ------ Media devices and hierachy stuff

table Device {
   id : uint32;

   hasInstallationType: bool = false;
   installationType: InstallationType;

   hasFirmwareVersion: bool = false;
   firmwareVersion: string;

   hasMediaSupportedSizes: bool = false;
   mediaSupportedSizes : [dune.imaging.types.OrientedMediaSizeFbs];

   hasMediaSupportedTypes: bool = false;
   mediaSupportedTypes: [dune.imaging.types.MediaIdFbs];

   hasSupportedMediaWidths: bool = false;
   supportedMediaWidths: dune.print.engine.MinAndMaxFbs;

   hasSupportedMediaLengths: bool = false;
   supportedMediaLengths: dune.print.engine.MinAndMaxFbs;

   supportedMediaOperations: [dune.print.engine.MediaOperation];
   //If MediaSizes are not supported based on Width and Length, Set this to false in the model specific csf file.
   considerSupportedWidthLength: bool = true;

   hasIsCustomSizeSupported: bool = false;
   isCustomSizeSupported: bool;

   deviceSettings: [DeviceSetting];

   hasVendor: bool = false;
   vendor:string;

   hasModel: bool = false;
   model:string;

   hasSerialNumber: bool = false;
   serialNumber:string;
}


// Configurations for IInput devices:

table Tray {
    subType: InputDevType;
    mediaSource: dune.imaging.types.MediaSource;

    hasPhysicalMargins: bool = false;
    physicalMargins: dune.imaging.types.MarginsFbs;

    hasUserReportedMargins: bool = false;
    userReportedMargins: [dune.imaging.types.MarginsFbs];

    hasFullBleedSupportConstraints: bool = false;
    fullBleedSupportConstraints: FullBleedConstraintsFbs;

    hasMarginsSupportConstraints: bool = false;
    marginsSupportConstraints: [MarginsConstraintsFbs];

    hasSheetCapacity: bool = false;
    sheetsCapacity: uint32 = 0;

    hasLowThreshold: bool = false;
    lowThreshold: uint32;

    hasFeedOrientationSupported: bool = false;
    feedOrientationSupported: dune.imaging.types.MediaOrientation;

    hasPageFaceOrientation: bool = false;
    pageFaceOrientation: dune.print.engine.PageOrientation;

    hasIsTrayPartOfPaperPath: bool = false;
    isTrayPartOfPaperPath: bool;

    hasIsMediaSizeSensingSupported: bool = false;
    isMediaSizeSensingSupported: bool;

    hasIsMediaTypeSensingSupported: bool = false;
    isMediaTypeSensingSupported: bool;

    hasIsMediaElectronicLevelSensingSupported: bool = false;
    isMediaElectronicLevelSensingSupported: bool;

    hasIsMediaDiscreteLevelSensingSupported: bool = false;
    isMediaDiscreteLevelSensingSupported:bool;

    hasMediaDetectableSizes: bool = false;
    mediaDetectableSizes:[dune.imaging.types.OrientedMediaSizeFbs];

    hasMediaDetectableTypes: bool = false;
    mediaDetectableTypes:[dune.imaging.types.MediaIdFbs];

    hasFeedType: bool = false;
    feedType: dune.print.engine.TrayFeedType;
}

table Roll {
    subType: InputDevType;
    mediaSource : dune.imaging.types.MediaSource;

    hasPhysicalMargins: bool = false;
    physicalMargins: dune.imaging.types.MarginsFbs;

    hasUserReportedMargins: bool = false;
    userReportedMargins: [dune.imaging.types.MarginsFbs];

    hasFullBleedSupportConstraints: bool = false;
    fullBleedSupportConstraints: FullBleedConstraintsFbs;

    hasMarginsSupportConstraints: bool = false;
    marginsSupportConstraints: [MarginsConstraintsFbs];

    hasIsSwitchable: bool = false;
    isSwitchable: bool = false;
    // TODO: add member for holding a possible Drawer device(s)
}

union InputInternalType {
    Roll,
    Tray
}



// Configurations for IOutput devices:

table Bin{
    subType: OutputDevType;
    mediaDestinationId: dune.imaging.types.MediaDestinationId;

    hasFinishers: bool = false;
    finishers: [uint32];

    hasValidFinisherCombinations: bool = false;
    validFinisherCombinations: [ValidFinisherCombination];

    hasSupportsManualMode: bool = false;
    supportsManualMode: bool = false;

    hasSheetsCapacity: bool = false;
    sheetsCapacity: uint32 = 0;

    hasPageDeliveryOrientation: bool = false;
    pageDeliveryOrientation: dune.print.engine.PageOrientation;

    hasIsBinFullSupported: bool = false;
    isBinFullSupported: bool = false;

    hasIsBinExternal: bool = false;
    isBinExternal: bool = false;

    hasIsBinPartOfPaperPath: bool = false;
    isBinPartOfPaperPath: bool = false;

    hasIsBinPartOfDuplexPath: bool = false;
    isBinPartOfDuplexPath: bool = false;

    hasIsBinPartOfFinishingPath: bool = false;
    isBinPartOfFinishingPath:bool = false;

    binOperationMode : dune.print.engine.BinOperationMode = NONE;
}

union OutputInternalType{
    Bin
}


// Configurations for IFinisher devices:

table Cutter{
    subType: FinisherDevType;
    properties: CutterPropertiesFbs;
}

table Folder{
    subType: FinisherDevType;
}

table LargeFormatTakeUpReel{
    subType: FinisherDevType;
}

table ProcessingOptionLocation{
    processingOptionLocation        : [int32];
}

table IPPData{
    processingOptionDirection       : dune.imaging.types.ProcessingOptionDirection;
    processingOptionReferenceEdge   : dune.imaging.types.ProcessingOptionReferenceEdge;
    hasProcessingOptionLocations    : bool = false;
    processingOptionLocations       : [ProcessingOptionLocation];
    hasProcessingOptionOffsets      : bool = false;
    processingOptionOffsets         : [int32];
}

table MediaSizeCharacteristicsOrientation{
    orientedMediaSize               : dune.imaging.types.OrientedMediaSizeFbs;
    hasFinishingContentOrientation  : bool = false;
    finishingContentOrientation     : [dune.imaging.types.FinishingContentOrientation];
    hasFinishingIPPDataSequence     : bool = false;
    finishingIPPDataSequence        : [IPPData];
    reverseOnPortrait               : bool = false;                                 // Default is false
    reverseOnLandscape              : bool = false;                                // Default is false
}

table MediaProcessingOption{
    staplingOption                          : dune.imaging.types.StapleOptions;
    punchingOption                          : dune.imaging.types.PunchingOptions;
    foldingOption                           : dune.imaging.types.FoldingOptions;
    bookletMakingOption                     : dune.imaging.types.BookletMakingOptions;
    id                                      : uint32;
    hasBindingLimit                         : bool = false;
    bindingLimit                            : dune.print.engine.MinAndMaxFbs;
    hasSetsLimit                            : bool = false;
    setsLimit                               : dune.print.engine.MinAndMaxFbs;
    hasMediaTypesSupported                  : bool = false;
    mediaTypesSupported                     : [dune.imaging.types.MediaIdFbs];
    hasBoundaryList                         : bool = false;
    boundaryList                            : [dune.imaging.types.MediaProcessingBoundary];
    hasMediaSizeCharacteristicsSequence     : bool = false;
    mediaSizeCharacteristicsSequence        : [MediaSizeCharacteristicsOrientation];
}

table MediaProcessingType{
    mediaProcessingTypeName         : dune.imaging.types.MediaProcessingTypes;
    id                              : uint32;
    isSheetsPerSetSupported         : bool = false;
    hasMediaProcessingOptionSequence: bool = false;
    mediaProcessingOptionSequence   : [MediaProcessingOption];
}

table DefaultMediaProcessingValue{
    hasDefaultMediaProcessingType               : bool = false;
    defaultMediaProcessingType                  : dune.imaging.types.MediaProcessingTypes;
    hasDefaultMediaProcessingOption             : bool = false;
    staplingOption                              : dune.imaging.types.StapleOptions = NONE;
    punchingOption                              : dune.imaging.types.PunchingOptions = NONE;
    foldingOption                               : dune.imaging.types.FoldingOptions = NONE;
    bookletMakingOption                         : dune.imaging.types.BookletMakingOptions = NONE;
    joggingOption                               : dune.imaging.types.JogOptions = NONE;
    hasDefaultMediaProcessingBoundary           : bool = false;
    defaultMediaProcessingBoundary              : dune.imaging.types.MediaProcessingBoundary;
}

table PageBasedFinisherBinProperties{
    binNumber                                   : uint32;
    binFaceOrientation                          : dune.print.engine.PageOrientation;
    capacityInSheets                            : uint32;
    binCanReportFull                            : bool = false;
    isPartOfFinishingPath                       : bool = false;
    doesBinSupportOffset                        : bool = false;
    hasMediaSizesSupportingOffset               : bool = false;
    mediaSizesSupportingOffset                  : [dune.imaging.types.OrientedMediaSizeFbs];
    hasMediaWidthLimit                          : bool = false;
    mediaWidthLimit                             : dune.print.engine.MinAndMaxFbs;
    hasMediaHeightLimit                         : bool = false;
    mediaHeightLimit                            : dune.print.engine.MinAndMaxFbs;
    hasMediaProcessingTypeList                  : bool = false;
    mediaProcessingTypeList                     : [MediaProcessingType];
    hasDefaultMediaProcessingValue              : bool = false;
    defaultMediaProcessingValue                 : DefaultMediaProcessingValue;
}

//FinisherConfig_2K_BookletMaker_HolePunch_2-4_bin
table PageBasedFinisher{
    subType: FinisherDevType;
    properties: PageBasedFinisherBinProperties;
}

// LargeFormatFolder's Properties:
enum UnitName:byte{
    FANFOLD,
    CROSSFOLD,
    A2ROTATION,
    TABAPPLICATOR
}

table FinishingUnit
{
    unitId: uint32;
    name: UnitName;
}

table FoldingStyle{
    id: uint32;
    name: string;
    config: dune.print.engine.ConfigFoldingStyle;
    titleBlockPosition: dune.print.engine.TitleBlockPosition;
    titleBlockWidth: dune.imaging.types.DistanceFbs;
    titleBlockHeight: dune.imaging.types.DistanceFbs;
    packetMargin: dune.imaging.types.DistanceFbs;
    packetWidth: dune.imaging.types.DistanceFbs;
    packetLength: dune.imaging.types.DistanceFbs;
    onlyFanFold: bool;
    outputFace: dune.print.engine.OutputFace;
    tabLabelApplied: bool;
    selfLef: dune.print.engine.StyleSefLef;
    postProcessingNeeded: bool;
    rotationUnitEnabled: bool;
}

table Diagnostic{
    id: uint32;
    name: string;
}

table PhysicalLimits{
    minPacketWidth : dune.imaging.types.DistanceFbs;
    maxPacketWidth : dune.imaging.types.DistanceFbs;
    minCrossFoldLength : dune.imaging.types.DistanceFbs;
    maxCrossFoldLength : dune.imaging.types.DistanceFbs;
    maxMarginWidth : dune.imaging.types.DistanceFbs;
    minInterPageTimeInMs: uint32 = 0;
    restrictedCustomCrossFoldLengths : [dune.imaging.types.DistanceFbs];
}

table LFFProperties{
    physicalLimits: PhysicalLimits;
    finishingUnits: [FinishingUnit];
    foldingStyles: [FoldingStyle];
    diagnostics: [Diagnostic];
    supportCustomFoldingStyle: bool = false;
    offlineModeSupport: bool = false;
}

table LargeFormatFolder{
    subType: FinisherDevType;
    properties: LFFProperties;
}

union FinisherInternalType{
    Cutter,
    Folder,
    LargeFormatFolder,
    LargeFormatTakeUpReel,
    PageBasedFinisher
}



// Configurations for IMediaPath devices:

table PrintZone{
    subType: MediaPathDevType;
}

table Flipper{
    subType: MediaPathDevType;
}

table Duplexer{
    subType: MediaPathDevType;
}

table Heater{
    subType: MediaPathDevType;
}

table Curing{
    subType: MediaPathDevType;
}

union MediaPathInternalType{
    PrintZone,
    Flipper,
    Duplexer,
    Heater,
    Curing
}

// Complete device configurations:

table InputDevice
{
    device       : Device;
    subType      : InputInternalType;
    snapshotData : dune.print.engine.InputSnapshotType;
}

table OutputDevice
{
    device       : Device;
    subType      : OutputInternalType;
    snapshotData : dune.print.engine.OutputSnapshotType;
}

table MediaPathDevice
{
    device       : Device;
    subType      : MediaPathInternalType;
    snapshotData : dune.print.engine.MediaPathSnapshotType;
}

table FinisherDevice
{
    device       : Device;
    subType      : FinisherInternalType;
    mediaDestinationId: dune.imaging.types.MediaDestinationId;
    snapshotData : dune.print.engine.FinisherSnapshotType;
}

// Drawer device is independent, does not come from subtype specification ( same for snapshot )

table InputDrawerDevice
{
    device       : DrawerDevice;
    snapshotData : dune.print.engine.DrawerSnapshotFbs;
}

// SimulatorActions:
table SetInputMediaIdAction
{
    deviceId: uint32;
    mediaId: dune.imaging.types.MediaIdFbs;
}

table SetInputMediaSizeAndOrientationAction
{
    deviceId: uint32;
    mediaSize: dune.imaging.types.MediaSizeFbs;
    mediaOrientation: dune.imaging.types.MediaOrientation;
}

// Simulator configuration:
table MediaSimulatorConfig
{
    defaultMediaMargins : dune.imaging.types.MarginsFbs;

    outputDevicesPresent: bool = false;
    outputDevices : [OutputDevice];

    inputDevicesPresent: bool = false;
    inputDevices : [InputDevice];

    mediaPathDevicesPresent: bool = false;
    mediaPathDevices : [MediaPathDevice];

    finisherDevicesPresent: bool = false;
    finisherDevices : [FinisherDevice];

    drawerDevicesPresent: bool = false;
    drawerDevices : [InputDrawerDevice];

    settings: [DeviceSetting];
}

root_type MediaSimulatorConfig;
